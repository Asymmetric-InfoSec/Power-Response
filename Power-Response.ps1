[CmdletBinding()]
Param (
    [String[]]$ComputerName = 'LOCALHOST',
    [String]$ConfigPath = ('{0}\Config.psd1' -f $PSScriptRoot),
    [PSCredential]$Credential,
    [ValidateSet('CSV','XLSX','XML')]
    [String]$OutputType,
    [HashTable]$Parameter = @{ ComputerName = $ComputerName; OutputType = $OutputType },
    [String[]]$Plugin
)

# $ErrorActionPreference of 'Stop' and $ProgressPreference of 'SilentlyContinue'
$ErrorActionPreference = 'Stop'
$ProgressPreference = 'SilentlyContinue'

# Function to copy remote file (locked or not) to a remote destination
function Copy-PRItem {
    param (
        [Parameter(Position=0, Mandatory=$true)]
        [System.Management.Automation.Runspaces.PSSession[]]$Session,

        [Parameter(Position=1, Mandatory=$true, ValueFromPipeline=$true)]
        [String[]]$Path,

        [Parameter(Position=2, Mandatory=$true)]
        [String]$Destination,

        [Parameter(Position=3)]
        [String]$Algorithm = $global:PowerResponse.Config.HashAlgorithm
    )

    begin {
        function CopyItem {
            [CmdletBinding()]
            param (
                [Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
                [String[]]$Path,

                [Parameter(Position=1, Mandatory=$true)]
                [String]$DestinationDirectory,

                [Parameter(Position=2, Mandatory=$true)]
                [String]$Algorithm
            )

            begin {
                ### Helper Functions
                # Create add meta data function
                function AddMetaData {
                    param (
                        [System.IO.FileInfo]$Path,
                        [String]$Destination,
                        [String]$DestinationDirectory,
                        [String]$Hash,
                        [String]$Algorithm
                    )

                    process {
                        # Set destination attributes
                        $Item = Get-Item -Force -Path $Destination
                        $Item.CreationTime = $Path.CreationTime
                        $Item.LastAccessTime = $Path.LastAccessTime
                        $Item.LastWriteTime = $Path.LastWriteTime

                        # Select the relevent metadata
                        $MetaData = $Path | Select-Object @{Name='Item'; Expression={$PSItem.Name}},'Directory','CreationTimeUtc',@{Name='ModifiedTimeUtc'; Expression={$PSItem.LastWriteTimeUTC}},@{Name='AccessTimeUtc'; Expression={$PSItem.LastAccessTimeUTC}},@{Name=$Algorithm; Expression={$Hash}}

                        # Build destination csv
                        $DestinationCsv = Join-Path -Path $DestinationDirectory -ChildPath 'CopyItems_Metadata.csv'

                        # Export meta data to csv
                        $MetaData | Export-Csv -Append -NoTypeInformation -Path $DestinationCsv
                    }
                }

                # Create destination location helper function
                function GetDestination {
                    param (
                        [String]$Path,
                        [String]$DestinationDirectory
                    )

                    process {
                        # Sanitize any streams and the drive colon
                        if ($Path -Match '^([^\\]+):' -and $Matches.Count -gt 1) {
                            $Path = $Path -Replace '^([^\\]+):',$Matches[1] 
                        }

                        $ChildPath = $Path -Replace ':','%3a' -Replace '\$','%24'

                        # Compute destination location
                        $Destination = Join-Path -Path $DestinationDirectory -ChildPath $ChildPath

                        return [System.IO.FileInfo]$Destination
                    }
                }

                # Create load PowerForensics helper function
                function LoadPowerForensics {
                    param ()

                    process {
                        # Copied from PowerForensics for locked file access - https://github.com/Invoke-IR/PowerForensics/blob/master/Modules/PowerForensics/PowerForensics.psm1
                        $pscore = ''
                        $lengthcore = 173568
                        $psv2 = ''
                        $lengthv2 = 172544

                        if (($PSVersionTable.Keys -contains "PSEdition") -and ($PSVersionTable.PSEdition -ne 'Desktop'))
                        {
                            $EncodedCompressedFile = $pscore
                            $Length = $lengthcore
                        }
                        else 
                        {
                            $EncodedCompressedFile = $psv2 
                            $Length = $lengthv2
                        }

                        $DeflatedStream = New-Object IO.Compression.DeflateStream([IO.MemoryStream][Convert]::FromBase64String($EncodedCompressedFile),[IO.Compression.CompressionMode]::Decompress)
                        $UncompressedFileBytes = New-Object Byte[]($Length)
                        $DeflatedStream.Read($UncompressedFileBytes, 0, $Length) | Out-Null
                        [Reflection.Assembly]::Load($UncompressedFileBytes) | Out-Null
                    }
                }

                ### Constants
                # Initialize Get-Content parameters
                $GetContent = @{
                    Encoding = 'Byte'
                    Force = $true
                }

                ### Ensure destination folder exists
                # Create $Destination directory if it doesn't exist
                if (!(Test-Path -Path $DestinationDirectory -PathType 'Container')) {
                    $null = New-Item -Type 'Directory' -Path $DestinationDirectory
                }

                # Save error action preference for later manipulation
                $SavedErrorActionPreference = $ErrorActionPreference
            }

            process {
                foreach ($Item in $Path) {
                    try {
                        # Resolve wildcards into full path(s), can't use Resolve-Path since it doesn't have a -Force parameter to see system files
                        $Items = Get-Item -Force -Path ($Item -Replace ':([^\\]+)$') -ErrorAction 'Stop' | Foreach-Object { if ($PSItem.PSIsContainer) { Get-ChildItem -File -Force -Recurse -Path $PSItem.FullName } else { $PSItem } } | Select-Object -ExpandProperty 'FullName'
                    } catch {
                        # Failed to get any children
                        $Items = $Item
                    }

                    foreach ($File in $Items) {
                        # Force error action preference to SilentlyContinue for ReadAllBytes/Get-Content calls
                        $ErrorActionPreference = 'SilentlyContinue'

                        # Split out any file $Stream as a separate argument
                        if ($File -Match ':([^\\]+)$' -and $Matches.Count -gt 1) {
                            # Split stream apart from path
                            $GetContent.Stream = $Matches[1]
                            $GetContent.Path = $File -Split ':([^\\]+)$' | Select-Object -First 1

                            # Get the content of the file
                            $Bytes = Get-Content @GetContent
                        } else {
                            $GetContent.Stream = ''
                            $GetContent.Path = $File

                            # Get the content of the file
                            $Bytes = [System.IO.File]::ReadAllBytes($GetContent.Path)
                        }

                        # Reset error action preference to previous state
                        $ErrorActionPreference = $SavedErrorActionPreference

                        if ($Bytes -eq $null) {
                            Write-Verbose -Message ("Unable to read file: {0} normally, assuming locked" -f $GetContent.Path)

                            # Ensure PowerForensics is loaded
                            if (('PowerForensics.FileSystems.Ntfs.FileRecord' -as [Type]) -eq $null) {
                                LoadPowerForensics
                            }

                            try {
                                # Get the byte content of the file
                                $Bytes = [PowerForensics.FileSystems.Ntfs.FileRecord]::GetContentBytes($GetContent.Path, $GetContent.Stream)
                            } catch [System.Management.Automation.MethodInvocationException] {
                                # Unable to find file
                                Write-Warning -Message ('Unable to collect file: {0}' -f $File)
                                continue
                            } catch {
                                # Unexpected error occurred
                                Write-Warning -Message ('Unexpected error copying file {0}: {1}' -f $File, $PSItem)
                                continue
                            }
                        }

                        # Create the end $Destination full path
                        $Destination = GetDestination -Path $File -DestinationDirectory $DestinationDirectory

                        # Create the destination directory if it doesn't exist
                        if (!$Destination.Directory.Exists) {
                            $null = New-Item -ItemType 'Directory' -Path $Destination.DirectoryName
                        }

                        # Verbose print results
                        Write-Verbose -Message ("File:        '{0}'" -f $GetContent.Path)
                        Write-Verbose -Message ("Destination: '{0}'" -f $Destination.FullName)
                        Write-Verbose -Message ("Stream:      '{0}'" -f $GetContent.Stream)

                        # For now, write the file to disk. Eventually GZIP stream the bytes
                        [System.IO.File]::WriteAllBytes($Destination.FullName, $Bytes)

                        # Null out bytes
                        $Bytes = $null

                        # Send garbage collector to reclaim memory
                        [System.GC]::Collect()

                        # Compute the hash of bytes
                        $Hash = Get-FileHash -Algorithm $Algorithm -Path $Destination.FullName | Select-Object -ExpandProperty 'Hash'

                        # Add to the meta data file
                        AddMetaData -Path $GetContent.Path -Destination $Destination.FullName -DestinationDirectory $DestinationDirectory -Hash $Hash -Algorithm $Algorithm
                    }
                }
            }
        }
    }

    process {
        try {
            # Invoke CopyFile on sessions
            Invoke-Command -ScriptBlock $function:CopyItem -Session $Session -ArgumentList @($Path),$Destination,$Algorithm
        } catch {
            # Caught error
            Write-Error -Message "Invoke command error: $PSItem" -ErrorAction 'Continue'
        }
    }
}

function Format-Parameter {
    param (
        [String[]]$Arguments,
        [System.IO.FileInfo]$Item = $global:PowerResponse.Location
    )

    process {
        # Gather to $Item's $CommandParameters
        $CommandParameters = Get-CommandParameter -Path $Item

        # If $CommandParameters does not contain a 'ComputerName' entry
        if ($CommandParameters.Keys -NotContains 'ComputerName') {
            # Add a fake 'ComputerName' parameter to $CommandParameters
            $CommandParameters.Add('ComputerName',(New-Object -TypeName 'System.Management.Automation.ParameterMetadata' -ArgumentList 'ComputerName',([String[]])))
        }

        # If $CommandParameters does not contain a 'OutputType' entry
        if ($CommandParameters.Keys -NotContains 'OutputType') {
            # Add a fake 'OutputType' parameter to $CommandParameters
            $CommandParameters.Add('OutputType',(New-Object -TypeName 'System.Management.Automation.ParameterMetadata' -ArgumentList 'OutputType',([String[]])))
        }

        # If we are passed no $Arguments, assume full $Parameter format check
        if ($Arguments.Count -eq 0) {
            $Arguments = $CommandParameters.Keys
        }

        # Narrow the scope of $Arguments to the $CommandParameters that have a stored value in $global:PowerResponse.Parameters
        $Arguments = $Arguments | Where-Object { $CommandParameters.Keys -Contains $PSItem -and $global:PowerResponse.Parameters.$PSItem }

        # Foreach $CommandParam listed in $Arguments
        foreach ($CommandParam in $Arguments) {
            # Gather the $CommandParameters $ParameterType
            if ($CommandParameters.$CommandParam.ParameterType -eq [System.Management.Automation.SwitchParameter]) {
                # Special handling for Switch parameters to cast to Boolean instead
                $ParameterType = [Boolean]
            } else {
                # Get the $ParameterType
                $ParameterType = $CommandParameters.$CommandParam.ParameterType
            }

            # Gather the $global:PowerResponse.Parameters.$CommandParameter $ValueType
            $ValueType = $global:PowerResponse.Parameters.$CommandParam.GetType()

            # Initialize $Commands array and $ExpressionResult and $i
            [String[]]$Commands = @()
            $ExpressionResult = $null
            $i = 0

            # If we have a UserInput object, attempt expression and array expansion
            if ($ValueType.FullName -Like '*UserInput') {
                # Convert UserInput object to String for more complex casting
                $global:PowerResponse.Parameters.$CommandParam = $global:PowerResponse.Parameters.$CommandParam.ToString()

                # If the input value is not a file path, try to execute it as a PowerShell expression
                if (!(Test-Path -PathType 'Leaf' -Path $global:PowerResponse.Parameters.$CommandParam -ErrorAction 'SilentlyContinue')) {
                    # Build a $Commands string to check for PowerShell expressions '[TYPE]($global:PowerResponse.Parameters.VALUE)'
                    $Commands += '[{0}]({1})' -f $ParameterType.FullName,$global:PowerResponse.Parameters.$CommandParam
                }

                # If we have an array $ParameterType and string $ValueType
                if ($ParameterType.BaseType.FullName -eq 'System.Array') {
                    # Build a $Commands string to check for array comma expansion '[TYPE]($global:PowerResponse.Parameters.VALUE -Split "\s*,\s*")'
                    $Commands += '[{0}]($global:PowerResponse.Parameters.$CommandParam -Split "\s*,\s*|\s+" | Where-Object {{ $PSItem }})' -f $ParameterType.FullName
                }
            }

            # Build a $Commands string to check for direct input typecasts '[TYPE]$global:PowerResponse.Parameters.VALUE'
            $Commands += '[{0}]$global:PowerResponse.Parameters.$CommandParam' -f $ParameterType.FullName

            # Loop while we haven't resolved a successful $ExpressionResult and we still have more $Commands to try
            do {
                # Try to evaluate the $Commands string
                try { $ExpressionResult = Invoke-Expression -Command $Commands[$i] } catch { Write-Verbose -Message ('Cannot resolve command: {0}, {1}' -f $Commands[$i],$PSItem) }

                # Increment $i
                $i += 1
            } while ($ExpressionResult -eq $null -and $i -lt $Commands.Length)
            # If successful command execution
            if ($ExpressionResult -ne $null) {
                # Set $global:PowerResponse.Parameters.$CommandParam to $ExpressionResult
                $global:PowerResponse.Parameters.$CommandParam = $ExpressionResult
            } else {
                # Determine if it was a casting or expression issue
                if ($ValueType.FullName -eq 'Power-Response.UserInput') {
                    $Warning = 'Parameter ''{0}'' removed: cannot interpret value ''{1}'' as a valid PowerShell expression. Have you tried using quotes?' -f $CommandParam,$global:PowerResponse.Parameters.$CommandParam
                } else {
                    $Warning = 'Parameter ''{0}'' removed: cannot convert value ''{1}'' to type ''{2}''. Have you tried using quotes?' -f $CommandParam,$global:PowerResponse.Parameters.$CommandParam,$CommandParameters.$CommandParam.ParameterType.Name
                }

                # Write an appropriate $Warning
                Write-PRWarning -Message $Warning

                # Remove the $CommandParam key from $global:PowerResponse.Parameters
                $null = $global:PowerResponse.Parameters.Remove($CommandParam)
            }
        }
    }
}

function Get-CommandParameter {
    param (
        [Parameter(Mandatory=$true)]
        [String]$Path
    )

    process {
        try {
            # Gather to $Path's parameters
            $CommandParameters = Get-Command -Name $Path | Select-Object -ExpandProperty 'Parameters'
        } catch {
            # Format error $Message
            $Message = 'Malformed plugin selected: {0}' -f $PSItem

            # Write error $Message
            Write-PRWarning -Message $Message

            # If the failure occurred getting the Location's parameters, move back to avoid repeat errors
            if ($Path -eq $global:PowerResponse.Location.FullName) {
                # Deselect this file
                Invoke-BackCommand
            }

            # Return an empty HashTable
            $CommandParameters = @{}
        }

        return $CommandParameters
    }
}

function Get-PRConfig {
    param (
        [String]$Property,
        [String]$Subproperty
    )

    process {
        # Build the $Command
        $Command = @('$global:PowerResponse.Config',$Property,$Subproperty) -join '.' -Replace '\.+$'

        try {
            # Invoke the expression to get the Config value
            $Value = Invoke-Expression -Command $Command -ErrorAction 'Stop'
        } catch {
            # Format $Message
            $Message = 'Unknown Config value {0}' -f (@($Property,$Subproperty) -join '.' -Replace '\.+$')

            # Write warning
            Write-PRWarning -Message $Message
        }

        # Return the Config hashtable
        return $Value
    }
}

function Get-PRPath {
    [CmdletBinding(DefaultParameterSetName='Output-Specific')]
    param (
        [Parameter(ParameterSetName='Bin')]
        [Switch]$Bin,

        [Parameter(ParameterSetName='Logs')]
        [Switch]$Logs,

        [Parameter(ParameterSetName='Output')]
        [Switch]$Output,

        [Parameter(ParameterSetName='Plugins')]
        [Switch]$Plugins,

        [Parameter(ParameterSetName='Output-Specific', Mandatory=$true)]
        [Alias('HuntName')]
        [Alias('ScopeName')]
        [String]$ComputerName,

        [Parameter(ParameterSetName='Output-Specific')]
        [ValidateNotNullOrEmpty()]
        [String]$Plugin = (Get-PSCallStack | Where-Object { $PSItem.ScriptName -Match $global:PowerResponse.Regex.Plugins } | Select-Object -First 1 -ExpandProperty 'ScriptName'),

        [Parameter(ParameterSetName='Output-Specific')]
        [String]$Directory
    )

    process {
        # Return any specific config paths that are requested
        if ($PSCmdlet.ParameterSetName -ne 'Output-Specific') {
            return $global:PowerResponse.Config.Path.($PSCmdlet.ParameterSetName)
        }

        # Consolidate possible $Plugin strings into a full path
        $Plugin = Get-PRPlugin -Name $Plugin | Select-Object -ExpandProperty 'FullName'

        if (!$Plugin -or !(Test-Path -Path $Plugin)) {
            throw 'Required parameter Plugin is not a valid plugin name or path'
        }

        # Get the $Item at $Plugin path
        $Item = Get-Item -Path $Plugin | Select-Object -ExpandProperty 'Directory'

        # Ensure 'Plugins' is removed with the rest of the $global:PowerResponse.Regex.Plugins
        $PluginRegex = '{0}Plugins\\?' -f $global:PowerResponse.Regex.Plugins

        # Determine the path to the $Plugin to mirror the directory structure
        $Mirror = $Item.FullName -Replace $PluginRegex

        # Format the returned path as $global:PowerResponse.Config.Path.Output\$ComputerName\{yyyy-MM-dd}\$Directory
        return '{0}\{1}\{2}\{3}' -f (Get-PRPath -Output),$ComputerName.ToUpper(),$Mirror,$Directory -Replace '\\+','\' -Replace '\\$'
    }
}

function Get-PRPlugin {
    [CmdletBinding()]
    param (
        [String]$Name
    )

    process {
        # Check if $Name is a direct path
        $Item = Get-Item -Path $Name -ErrorAction 'Ignore'

        # If $Item exists and is a file object with full path matching the Plugins regular expression, return it
        if ($Item -and !$Item.PSIsContainer -and $Item.FullName -Match $global:PowerResponse.Regex.Plugins) {
            return $Item
        }

        # Format the $Include parameter
        $Include = '*{0}*' -f $Name

        # Get all files under the Plugins directory and $Include only things like $Name
        return Get-ChildItem -Recurse -File -Path (Get-PRPath -Plugins) -Include $Include
    }
}

function Import-Config {
    param (
        [String]$Path
    )

    begin {
        # List out required values to check for
        $TopRequiredValues = @('AdminUserName','AutoAnalyze','AutoClear','EncryptPassword','HashAlgorithm','OutputType','Path','PromptText','PSSession','RemoteStagePath','ThrottleLimit','ShowParametersAtStart')
        $PathRequiredValues = @('Bin','Logs','Output','Plugins')
        $PSSessionRequiredValues = @('NoMachineProfile')
    }

    process {
        # Default 'Config' values
        $Default = [Ordered]@{
            AdminUserName = $ENV:UserName
            AutoAnalyze = $true
            AutoClear = $true
            EncryptPassword = 'infected'
            HashAlgorithm = 'SHA256'
            OutputType = @('CSV','XLSX')
            PromptText = 'power-response'
            RemoteStagePath = 'C:\ProgramData\Power-Response'
            ShowParametersAtStart = $true
            ThrottleLimit = 32

            # C:\Path\To\Power-Response\{FolderName}
            Path = @{
               Bin = '{0}\Bin' -f $PSScriptRoot
               Logs = '{0}\Logs' -f $PSScriptRoot
               Output = '{0}\Output' -f $PSScriptRoot
               Plugins = '{0}\Plugins' -f $PSScriptRoot
            }

            # PSSession options
            PSSession = @{
                NoMachineProfile = $true
            }
        }

        $Config = [Ordered]@{}

        # Try to import the data, on failure set to default
        try {
            # Get the Config file at $Path
            $File = Get-Item -Path $Path -ErrorAction 'Stop'

            # Import the Config data file and bind it to the $Config variable
            Import-LocalizedData -BindingVariable 'Config' -BaseDirectory $File.PSParentPath -FileName $File.Name
        } catch {
            # Either intentionally threw an error on file absense, or Import-LocalizedData failed
            Write-Verbose ('Unable to import config on ''Path'': ''{0}''' -f $Path)
            $Config = $Default
        }

        # If no value is provided in the config file, set the default values
        $Default.Keys | Where-Object { $Config.Keys -NotContains $PSItem } | Foreach-Object { $Config.$PSItem = $Default.$PSItem }
        $Default.Path.Keys | Where-Object { $Config.Path.Keys -NotContains $PSItem } | Foreach-Object { $Config.Path.$PSItem = $Default.Path.$PSItem }
        $Default.PSSession.Keys | Where-Object { $Config.PSSession.Keys -NotContains $PSItem } | Foreach-Object { $Config.PSSession.$PSItem = $Default.PSSession.$PSItem }

        # Check for required $Config value existence (sanity check - should never fail with default values)
        [String[]]$TopMissing = $TopRequiredValues | Where-Object { $Config.Keys -NotContains $PSItem -or !$Config.$PSItem -eq $null }
        [String[]]$PathMissing = $PathRequiredValues | Where-Object { $Config.Path.Keys -NotContains $PSItem -or !$Config.Path.$PSItem -eq $null }
        [String[]]$PSSessionMissing = $PSSessionRequiredValues | Where-Object { $Config.PSSession.Keys -NotContains $PSItem -or !$Config.PSSession.$PSItem -eq $null }

        # Throw error for missing config values after default values have been processed
        if ($TopMissing + $PathMissing + $PSSessionMissing) {
            throw ('Missing required configuration value: {0}' -f ($TopMissing + ($PathMissing | Foreach-Object { 'Path.{0}' -f $PSItem }) + ($PSSessionMissing | Foreach-Object { 'PSSession.{0}' -f $PSItem })))
        }

        # Set global config object
        $global:PowerResponse.Config = $Config

        # Loop through $DirPath
        $global:PowerResponse.Regex = @{}
        foreach ($DirPath in $Config.Path.GetEnumerator()) {
            # If the $DirPath doesn't exist, create it and get rid of the output
            if (!(Test-Path $DirPath.Value)) {
                $null = New-Item -Path $DirPath.Value -ItemType 'Directory'
            }

            # Store each path as a regular expressions for string replacing later
            $global:PowerResponse.Regex.($DirPath.Key) = '^{0}' -f [Regex]::Escape($DirPath.Value -Replace ('{0}$' -f $DirPath.Key))
        }
    }
}

function Invoke-BackCommand {
    [Alias('Invoke-..Command')]
    param (
        [String[]]$Arguments
    )
    process {
        # If the Location context is lower than the root Plugins directory
        if ((Get-PRPath -Plugins) -NotMatch [Regex]::Escape($global:PowerResponse.Location.FullName)) {
            # Move Location up a directory
            $global:PowerResponse.Location = Get-Item -Path $global:PowerResponse.Location.PSParentPath
        }
    }
}

function Invoke-ClearCommand {
    [Alias("Invoke-CLSCommand")]
    param (
        [String[]]$Arguments
    )

    process {
        # Clear the console
        [System.Console]::Clear()
    }
}

function Invoke-ExitCommand {
    [Alias('Invoke-QuitCommand')]
    param (
        [String[]]$Arguments
    )
    process {
        exit
    }
}

function Invoke-HelpCommand {
    [Alias('Invoke-?Command')]
    param (
        [String[]]$Arguments
    )

    process {
        # Load possible $Commands name, usage, and description
        $Commands = @(
            @{ Name='back'; Usage='back'; Description='de-select a script file and move back to menu context' },
            @{ Name='exit'; Usage='exit'; Description='exits Power Response' },
            @{ Name='help'; Usage='help [commands...]'; Description='displays the help for all or specified commands'},
            @{ Name='remove'; Usage='remove [parameters...]'; Description='removes all or a specified parameter values' },
            @{ Name='run'; Usage='run'; Description='runs the selected script with parameters set in environment' },
            @{ Name='set'; Usage='set <parameter> [value]'; Description='sets a parameter to a value' },
            @{ Name='show'; Usage='show [parameters...]'; Description='shows a list of all or specified parameters and values' }
            @{ Name='clear'; Usage='clear'; Description='clears the screen of clutter while running plugins' }
        ) | Foreach-Object { [PSCustomObject]$PSItem }

        # If $global:PowerResponse.Location is a directory
        if ($global:PowerResponse.Location.PSIsContainer) {
            # Don't show 'back' or 'run' or 'clear' as command options
            $Commands = $Commands | Where-Object { @('back','run') -NotContains $PSItem.Name }
        }

        # Filter $Arguments to remove invalid $Commands.Name
        $Arguments = $Arguments | Where-Object { $Commands.Name -Contains $PSItem }

        # If $Arguments are blank
        if ($Arguments.Count -eq 0) {
            # Assume full 'help' display
            $Arguments = $Commands.Name
        }

        # If $Arguments and $Command.Name are different
        if ($Commands.Name | Where-Object { $Arguments -NotContains $PSItem }) {
            # Specific 'help <command>' show the Usage and Description
            $Property = @('Usage','Description')
        } else {
            # Generic 'help' show the Name and Description
            $Property = @('Name','Description')
        }

        if (!$global:PowerResponse.Location.PSIsContainer){
            Get-Help -Full $global:PowerResponse.Location
        }

        # Print out the rows of $Commands specified by $Arguments and the columns specified by $Property
        return $Commands | Where-Object { $Arguments -Contains $PSItem.Name } | Select-Object -Property $Property | Format-Table
    }
}

function Invoke-RemoveCommand {
    param (
        [String[]]$Arguments
    )

    process {
        # If $Arguments are blank and we have selected a file $global:PowerResponse.Location
        if ($Arguments.Count -eq 0 -and !$global:PowerResponse.Location.PSIsContainer) {
            # Assume 'remove' all tracked command parameters
            $Arguments = Get-Command -Name $global:PowerResponse.Location | Select-Object -ExpandProperty 'Parameters' | Select-Object -ExpandProperty 'Keys'
        } elseif ($Arguments.Count -eq 0) {
            # Assume 'remove' all tracked $global:PowerResponse.Parameters
            $Arguments = $global:PowerResponse.Parameters | Select-Object -ExpandProperty 'Keys'
        }

        # Filter $Arguments to remove invalid $global:PowerResponse.Parameters.Keys
        $Arguments = $Arguments | Where-Object { $global:PowerResponse.Parameters.Keys -Contains $PSItem }

        # If we have $Arguments to remove
        if ($Arguments.Count -ne 0) {
            # Remove $Arguments from $global:PowerResponse.Parameters
            $null = $Arguments | Foreach-Object { $global:PowerResponse.Parameters.Remove($PSItem) }

            # Write parameter removal log
            Write-PRLog ('Removed Parameter(s): ''{0}''' -f ($Arguments -Join ''', '''))
        }

        # If ComputerName parameter got removed
        if (!$global:PowerResponse.Parameters.ComputerName) {
            # Set it back to LOCALHOST
            $global:PowerResponse.Parameters.ComputerName = 'LOCALHOST'
        }

        # If OutputType parameter got removed
        if (!$global:PowerResponse.Parameters.OutputType) {
            # Set it back to the $global:PowerResponse.Config.OutputType
            $global:PowerResponse.Parameters.OutputType = $global:PowerResponse.Config.OutputType
        }

        # Show the new parameter list
        Invoke-ShowCommand
    }
}

function Invoke-RunCommand {
    param (
        [String[]]$Arguments,
        [System.IO.FileInfo]$Item = $global:PowerResponse.Location
    )

    process {
        # If we have selected a file $global:PowerResponse.Location
        if ($global:PowerResponse.Parameters.ComputerName -and $Item -and !$Item.PSIsContainer) {
            # Ensure all parameters are formatted to this $Item
            Format-Parameter -Item $Item

            # Gather the $SessionOption from $global:PowerResponse.Config.PSSession
            $SessionOption = $global:PowerResponse.Config.PSSession

            # Gather $SessionParameters
            $SessionParameters = @{
                SessionOption = New-PSSessionOption @SessionOption
            }

            # Add Credential parameter if we are tracking one
            if ($global:PowerResponse.Parameters.Credential) {
                $SessionParameters.Credential = $global:PowerResponse.Parameters.Credential
            }

            # Initialize $Session
            $Session = @()

            foreach ($ComputerName in $global:PowerResponse.Parameters.ComputerName.ToUpper()) {
                try {
                    # Create the $Sessions array
                    $Session += New-PSSession -ComputerName $ComputerName -Name $ComputerName @SessionParameters
                } catch [System.Management.Automation.Remoting.PSRemotingTransportException] {
                    # Format connection warning message
                    $Message = 'Unable to connect to computer: {0}' -f $ComputerName

                    # Write $Message to host
                    Write-PRHost -Message $Message

                    # Write host plugin log
                    Write-PRPluginLog -FrameworkFailure -ComputerName $ComputerName -Plugin $Item.BaseName -FrameworkError $Message
                } catch {
                    # Format warning $Message
                    $Message = 'Error creating Session: {0}' -f $PSItem

                    # Write warning $Message
                    Write-PRWarning -Message ("{0}`n`tSkipping plugin execution" -f $Message)

                    return
                }
            }

            # Return early if we have no sessions to execute plugin on
            if ($Session.Count -eq 0) {
                # Format early return message
                $Message = 'No sessions created, skipping plugin execution'

                # Write host $Message
                Write-PRHost -Message $Message

                return
            }

            # Format execution $Message
            $Message = 'Plugin Execution Started at {0}' -f (Get-Date)

            # Write execution to host
            Write-PRHost -Message $Message
Write-Debug 'stahp'
            try {
                # Invoke the PR Plugin
                Invoke-PRPlugin -Path $Item -Session $Session

            } catch {
                # Format warning $Message
                $Message = 'Error Invoking Plugin: Session, privilege, or availability error cccurred: {0}' -f $PSItem

                # Write warning $Message
                Write-PRWarning -Message $Message -Append "`n`tSkipping plugin execution"

                return
            }

            # Protect any files that were copied to this particular $global:PowerResponse.OutputPath
            Protect-PRFile

            # Clean up the created $Sessions
            Remove-PSSession -Session $Session

            # Write plugin execution completion message and verify with input prior to clearing
            Write-Host -Object ('Plugin Execution Complete at {0}' -f (Get-Date))
        } else {
            # Write the warning for no plugin selected
            Write-Warning -Message 'No plugin selected for execution. Press Enter to Continue.'
        }

        if ($global:PowerResponse.Config.AutoClear) {
            # Prompt for message acknowledgment
            Write-Host -Object "Review status messages above or consult the Power-Response log.`r`nPress Enter to Continue Forensicating" -ForegroundColor 'Cyan' -Backgroundcolor 'Black'

            # Somewhat janky way of being able to have a message acknowledged and still have it show in color
            $null = Read-Host

            # Clear screen once completion acknowledged
            Invoke-ClearCommand
        }

        # Move $global:PowerResponse.Location back up a directory
        Invoke-BackCommand
    }
}

function Invoke-SetCommand {
    param (
        [String[]]$Arguments
    )

    process {
        # Set command requires a parameter as an argument
        if ($Arguments.Count -lt 1) {
            Write-Warning 'Improper ''set'' command usage'
            return Invoke-HelpCommand -Arguments 'set'
        }

        # Set the $global:PowerResponse.Parameters key and value specified by $Arguments
        $global:PowerResponse.Parameters.($Arguments[0]) = [UserInput](($Arguments | Select-Object -Skip 1) -Join ' ')

        # If we are provided a blank set command, remove the key from $global:PowerResponse.Parameters
        if ($global:PowerResponse.Parameters.($Arguments[0]) -eq '') {
            return Invoke-RemoveCommand -Arguments $Arguments
        }

        # Write a set parameter log
        Write-PRLog -Message ('Set Parameter: ''{0}'' = ''{1}''' -f $Arguments[0], $global:PowerResponse.Parameters.($Arguments[0]))

        # If we have a file $global:PowerResponse.Location, format the $global:PowerResponse.Parameters
        if (!$global:PowerResponse.Location.PSIsContainer) {
            Format-Parameter -Arguments $Arguments[0]
        }

        # Show the newly set value
        return Invoke-ShowCommand -Arguments $Arguments[0]
    }
}

function Invoke-ShowCommand {
    param (
        [String[]]$Arguments
    )

    process {
        # If we have selected a file $global:PowerResponse.Location
        if (!$global:PowerResponse.Location.PSIsContainer) {
            # Get command information about the $global:PowerResponse.Location
            $Command = Get-Command -Name $global:PowerResponse.Location

            # Gather any default values
            $CommandDefaultValues = @{}

            # Gather any parameter default values from the $Command.ScriptBlock.Ast
            $Command.ScriptBlock.Ast.FindAll({ $Args[0] -is [System.Management.Automation.Language.ParameterAst] }, $true) | Where-Object { $PSItem.DefaultValue } | Foreach-Object { $CommandDefaultValues.($PSItem.Name.VariablePath.UserPath) = Invoke-Expression -Command $PSItem.DefaultValue.Extent.Text }

            # Gather to $global:PowerResponse.Location's $CommandParameters
            $CommandParameters = $Command.Parameters

            # Remove the 'Session' parameter
            $null = $CommandParameters.Remove('Session')

            # If $CommandParameters does not contain a 'ComputerName' entry
            if ($CommandParameters.Keys -NotContains 'ComputerName') {
                # Add a fake 'ComputerName' parameter to $CommandParameters
                $CommandParameters.Add('ComputerName',(New-Object -TypeName 'System.Management.Automation.ParameterMetadata' -ArgumentList 'ComputerName',([String[]])))
            }

            # If $CommandParameters does not contain a 'ComputerName' entry
            if ($CommandParameters.Keys -NotContains 'OutputType') {
                # Add a fake 'ComputerName' parameter to $CommandParameters
                $CommandParameters.Add('OutputType',(New-Object -TypeName 'System.Management.Automation.ParameterMetadata' -ArgumentList 'OutputType',([String[]])))
            }

            # Filter $Arguments to remove invalid $CommandParameters.Keys
            $Arguments = $Arguments | Where-Object { $CommandParameters.Keys -Contains $PSItem }

            # If $Arguments array is empty
            if ($Arguments.Count -eq 0) {
                # Create stub cmdlet function to parse $System parameters
                function stub { [CmdletBinding()] param() process{} }

                # List of $System scoped parameters
                $System = Get-Command -Name 'stub' | Select-Object -ExpandProperty 'Parameters' | Select-Object -ExpandProperty 'Keys'

                # Set $Arguments to all non-$System keys of $global:PowerResponse.Parmeters
                $Arguments = $CommandParameters.GetEnumerator() | Where-Object { $System -NotContains $PSItem.Key -or $global:PowerResponse.Parameters.($PSItem.Key) } | Select-Object -ExpandProperty 'Key'
            }
        } elseif ($Arguments.Count -eq 0) {
            # Set $Arguments to all Keys of $global:PowerResponse.Parameters
            $Arguments = $global:PowerResponse.Parameters.Keys
        }

        # If we weren't provided specific $Arguments and $Arguments doesn't contain ComputerName
        if (!$PSBoundParameters.Arguments -and $Arguments -NotContains 'ComputerName') {
            # Add 'ComputerName' to the front of the list
            $Arguments = @('ComputerName') + $Arguments
        }

        # If we weren't provided specific $Arguments and $Arguments doesn't contain OutputType
        if (!$PSBoundParameters.Arguments -and $Arguments -NotContains 'OutputType') {
            # Add 'OutputType' to the end of the list
            $Arguments = $Arguments + @('OutputType')
        }

        # Initialize empty $Param(eter) return HashTable
        $Param = [Ordered]@{}

        # For plugins with no parameters, write-host to run plugin
        if ($CommandParameters.Count -gt 0) {
            # Set $Param.[Type]$Key to the $global:PowerResponse.Parameters.$Key value
            $Arguments | Sort-Object | Foreach-Object { $Param.('[{0}]{1}' -f $CommandParameters.$PSItem.ParameterType.Name,$PSItem)=$global:PowerResponse.Parameters.$PSItem }

            # Fill in blank values with the parameter defaults
            $Arguments | Sort-Object | Where-Object { $Param.('[{0}]{1}' -f $CommandParameters.$PSItem.ParameterType.Name,$PSItem) -eq $null -and $CommandDefaultValues.$PSItem } | Foreach-Object { $Param.('[{0}]{1}' -f $CommandParameters.$PSItem.ParameterType.Name,$PSItem) = $CommandDefaultValues.$PSItem }
        } else {
            # Set $Param.$Key to the $global:PowerResponse.Parameters.$Key value
            $Arguments | Sort-Object | Foreach-Object { $Param.$PSItem=$global:PowerResponse.Parameters.$PSItem }
        }

        # Cast the HashTable to a PSCustomObject and format as an alphabetical-order list object
        return [PSCustomObject]$Param | Format-List
    }
}

function Invoke-PRCommand {
    param (
        [String]$UserInput
    )

    process {
        # $Keyword will be the first word of the user input
        $Keyword = $UserInput -Split ' ' | Select-Object -First 1

        # $Arguments will be any following words
        $Arguments = $UserInput -Split ' ' | Select-Object -Skip 1

        # If no $Keyword is not provided or we have no $global:PowerResponse.Location and were provided a number return early
        if (!$Keyword -or ($global:PowerResponse.Location.PSIsContainer -and $Keyword -Match '^[0-9]+$')) {
            return
        }

        # Try to execute function corresponding to command passed
        try {
            & ('Invoke-{0}Command' -f $Keyword) -Arguments $Arguments
        } catch {
            # Didn't understand keyword specified, write warning to screen
            Write-Warning ('Unknown Command ''{0}'', ''help'' prints a list of available commands' -f $Keyword)
            Write-Verbose $PSItem
        }
    }
}

function Invoke-PRSplat {
    param (
        [Parameter(Mandatory=$true, Position=0)]
        [String]$Path,
        [Parameter(Mandatory=$true, Position=1)]
        [HashTable]$Parameters
    )

    process {
        # Execute $Path file with $Parameters preserving PSComputerName as RemoteComputerName
        & $Path @Parameters | Foreach-Object { Add-Member -InputObject $PSItem -NotePropertyName 'RemoteComputerName' -NotePropertyValue $PSItem.PSComputerName -PassThru }
    }
}

function Invoke-PRPlugin {
    [CmdletBinding(DefaultParameterSetName='Name')]
    param (
        [Parameter(Mandatory=$true, ParameterSetName='Path')]
        [String]$Path,

        [Parameter(Mandatory=$true, ParameterSetName='Name')]
        [String]$Name,

        [Parameter(Mandatory=$true)]
        [System.Management.Automation.Runspaces.PSSession[]]$Session,

        [Alias('ScopeName')]
        [String]$HuntName,

        [Switch]$NoAnalyze
    )

    begin {
        # Collapse $Name parameter into $Path
        if ($PSCmdlet.ParameterSetName -eq 'Name') {
            # Search through the Plugins directory for a matching file $Name
            $Path = Get-PRPlugin -Name $Name
        }

        # Ensure we have a valid $Path
        if (!$Path -or !(Test-Path -Path $Path)) {
            # Format error $Message
            $Message = 'Empty or invalid plugin identifier passed: {0}' -f (@($PSBoundParameters.Name,$PSBoundParameters.Path) -Join '')

            # Write error $Message
            Write-PRWarning -Message $Message

            return
        }

        # Get the FileInfo $Item
        $Item = Get-Item -Path $Path

        # Gather to $Path's $CommandParameters
        $CommandParameters = Get-CommandParameter -Path $Path

        # Initialize $OutPRFileParameters
        $OutPRFileParameters = @{
            Plugin = $Path
        }

        # Add Hunt specific parameters if $HuntName is present
        if ($HuntName) {
            $OutPRFileParameters.ComputerName = $HuntName
            $OutPRFileParameters.Directory = $Item.BaseName -Replace '^.+-'
            $OutPRFileParameters.OutputType = 'CSV'
        }
    }

    process {
        # Clear $Error log
        $Error.Clear()

        # Ensure we log the plugin execution
        $LoggedPlugin = $false

        # If $CommandParameters doesn't contain 'Session'
        if ($CommandParameters.Keys -NotContains 'Session') {

            # Compile $InvokeCommandParameters HashTable
            $InvokeCommandParameters = @{
                ArgumentList = $CommandParameters.Keys | Foreach-Object { $global:PowerResponse.Parameters.$PSItem }
                AsJob = $true
                FilePath = $Path
                JobName = $Item.BaseName
                Session = $Session
                ThrottleLimit = $global:PowerResponse.Config.ThrottleLimit
            }

            try {
                # Invoke the script file as a $Job with the $ArgumentList
                $Results = Invoke-Command @InvokeCommandParameters | Receive-Job -Wait -AutoRemoveJob -ErrorAction 'SilentlyContinue'
            } catch {
                # Encountered an error
                Write-PRPluginLog -FrameworkFailure -ComputerName $Session.ComputerName -Plugin $Item.BaseName -RemoteErrors $PSItem

                # Inform future plugin log
                $LoggedPlugin = $true
            }
        } else {
            # Initialize $ReleventParameters Hashtable
            $ReleventParameters = @{}

            # Parse the $ReleventParameters from $global:PowerResponse.Parameters
            $global:PowerResponse.Parameters.GetEnumerator() | Where-Object { $CommandParameters.Keys -Contains $PSItem.Key } | Foreach-Object { $ReleventParameters.($PSItem.Key) = $PSItem.Value }

            # If the plugin is expecting a $Session of type PSSession[]
            if ($CommandParameters.Session.ParameterType.BaseType.FullName -eq 'System.Array') {
                Write-Verbose -Message 'Detected Plugin requesting all the Sessions'

                # Set $ReleventParameters.Session to the generated $Session
                $ReleventParameters.Session = $Session

                Write-Verbose -Message ('Executing {0}' -f $Item.BaseName.ToUpper())

                try {
                    # Execute the $Path with the $ReleventParameters
                    $Results = & $Path @ReleventParameters
                    # $Job = Start-Job -ScriptBlock $function:InvokePRSplat -ArgumentList @($Path, $ReleventParameters)
                } catch {
                    # Encountered an error
                    Write-PRPluginLog -FrameworkFailure -ComputerName $Session.ComputerName -Plugin $Item.BaseName -RemoteErrors $PSItem

                    # Inform future plugin log
                    $LoggedPlugin = $true
                }
            } else {
                Write-Verbose -Message 'Detected Plugin requesting single Session'
                # $Job = @()
                $Results = @()

                # Loop through each $SessionInstance
                foreach ($SessionInstance in $Session) {
                    # Set $ReleventParameters.Session to the current $SessionInstance
                    $ReleventParameters.Session = $SessionInstance

                    try {
                        $Results += & $Path @ReleventParameters
                        # $Job += Start-Job -ScriptBlock $function:InvokePRSplat -ArgumentList @($Path, $ReleventParameters)
                    } catch {
                        # Encountered an error
                        Write-PRPluginLog -FrameworkFailure -ComputerName $Session.ComputerName -Plugin $Item.BaseName -RemoteErrors $PSItem

                        # Inform future plugin log
                        $LoggedPlugin = $true
                    }
                }
            }
        }


        # Gather the explicitly remote $RemoteErrors
        $RemoteErrors = $Error | Where-Object { $PSItem -is [System.Management.Automation.Runspaces.RemotingErrorRecord] }

        if (!$LoggedPlugin) {
            # Write plugin logs and print plugin success/fail message
            Write-PRPluginLog -ComputerName $Session.ComputerName -Plugin $Item.BaseName -RemoteErrors $RemoteErrors
        }

        # Loop through $Result groups
        foreach ($Result in ($Results | Group-Object -Property 'PSComputerName')) {
            # Handle Hunt/Non-Hunt output
            if ($HuntName) {
                # Append the ComputerName to the filename
                $OutPRFileParameters.Append = $Result.Name.ToLower()
            } else {
                # Send output to ComputerName folder
                $OutPRFileParameters.ComputerName = $Result.Name
            }

            # Send each $Result to it's specific PR output file based on ComputerName
            $Result.Group | Out-PRFile @OutPRFileParameters
        }

    }

    end {
        # Compute $AnalysisPath
        $AnalysisPath = '{0}\Analysis\{1}' -f (Get-PRPath -Plugins),($Path -Replace '.+-','Analyze-')

        # If auto execution of analysis plugins is set and we have a valid $AnalysisPath
        if ($global:PowerResponse.Config.AutoAnalyze -and !$NoAnalyze -and $AnalysisPath -ne $Path -and (Test-Path -Path $AnalysisPath)) {
            Write-Host -Object ('Detected Analysis Plugin {0}' -f (Get-Item -Path $AnalysisPath).BaseName.ToUpper())

            # Invoke the $AnalysisPath plugin
            Invoke-PRPlugin -Path $AnalysisPath -Session $Session
        }
    }
}

function Out-PRFile {
    param (
        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [PSObject]$InputObject,

        [Parameter(Mandatory=$true)]
        [Alias('HuntName')]
        [Alias('ScopeName')]
        [String]$ComputerName,

        [String]$Plugin = $global:PowerResponse.Location.FullName,

        [ValidateSet('CSV','XLSX','XML')]
        [String[]]$OutputType = $global:PowerResponse.Parameters.OutputType,

        [String]$Directory,

        [String]$Append
    )

    begin {
        # Get UTC $Date
        $Date = (Get-Date).ToUniversalTime()

        # Resolve $Plugin that is passed as a name reference
        if (!(Test-Path -Path $Plugin)) {
            $Plugin = Get-PRPlugin -Name $Plugin
        }

        # If no ImportExcel module is found
        if ($OutputType -Contains 'XLSX' -and !(Get-Module -ListAvailable -Name 'ImportExcel')) {
            Write-Warning -Message 'No ''ImportExcel'' module detected, will not write output to XLSX format (run ''Setup.ps1'' as admin)'

            # Sanitize $OutputType
            $OutputType = $OutputType -ne 'XLSX'

            # Prevent reoccuring warnings
            $global:PowerResponse.Parameters.OutputType = $global:PowerResponse.Parameters.OutputType -ne 'XLSX'
        }

        # Create the destination file $Name: {UTC TIMESTAMP}_{PLUGIN}_{APPEND}
        $Name = ('{1}_{2}' -f $Date, (Get-Item -Path $Plugin).BaseName.ToLower(),$Append) -Replace '_$'

        # Remove irrelevent keys from $PSBoundParameters
        $null = $PSBoundParameters.Remove('Append')
        $null = $PSBoundParameters.Remove('InputObject')
        $null = $PSBoundParameters.Remove('OutputType')

        # Get $OutputPath with remaining $PSBoundParameters
        $OutputPath = Get-PRPath @PSBoundParameters

        # Initialize $Objects array for pipeline handling
        $Objects = @()
    }

    process {
        $Objects += $InputObject
    }

    end {
        if ($Objects.Count -eq 0) {
            # Return early if there is no output data
            return
        }

        # If the $Directory doesn't exist, create it
        if (!(Test-Path -Path $OutputPath)) {
            $null = New-Item -Path $OutputPath -Type 'Directory'
        }

        try {
            # Initialize $Paths to empty array
            $Path = @()

            # Export the $Objects into specified format
            switch($OutputType) {
                'CSV' {
                    # Write verbose message
                    Write-Verbose -Message ('Exporting objects to {0} format' -f $PSItem)

                    # Format the destination $FilePath
                    $FilePath = '{0}\{1:yyyy-MM-dd_HH-mm-ss-fff}_{2}.{3}' -f $OutputPath,$Date,$Name,$PSItem.ToLower()

                    # Export $Objects as CSV data
                    $Objects | Export-Csv -Path $FilePath -NoTypeInformation

                    # Track $FilePath for protecting later
                    $Path += $FilePath
                }
                'XLSX' {
                    # Write verbose message
                    Write-Verbose -Message ('Exporting objects to {0} format' -f $PSItem)

                    # Format the $ExcelPath
                    $FilePath = '{0}\{1}\{2}_power-response_output.xlsx' -f (Get-PRPath -Output),$ComputerName.ToUpper(),$ComputerName.ToLower()

                    # Track $OpenExcelParameters
                    $ExcelParameters = @{
                        Create = !(Test-Path -Path $FilePath)
                    }

                    try {
                        # Open the $ExcelPackage
                        $ExcelParameters.ExcelPackage = Open-ExcelPackage @ExcelParameters -Path $FilePath
                    } catch {
                        # Write file open warnning message
                        Write-Warning -Message ('Detected that Excel has the file {0} open. Please save and close the file so writing can occur. Press Enter to continue' -f $FilePath)

                        # Wait for user input
                        $null = Read-Host

                        # Open the $ExcelPackage again and this time fail past the remaining logic
                        $ExcelParameters.ExcelPackage = Open-ExcelPackage @ExcelParameters -Path $FilePath
                    }

                    # Remove the Create parameter
                    $null = $ExcelParameters.Remove('Create')
                    $ExcelParameters.WorksheetName = '{0}_{1:MM-dd_HH-mm-ss}' -f ($Name -Replace '^.+?-'),$Date

                    # Add a worksheet in alphabetical order
                    $ExcelParameters.WorksheetName = Add-Worksheet @ExcelParameters -MoveAfter * | Select-Object -ExpandProperty 'Name'

                    # Export $Objects as XLSX data
                    $Objects | Export-Excel @ExcelParameters -Autosize -FreezeTopRow -WarningAction 'SilentlyContinue'

                    # Specifically don't track $FilePath for protecting later since we want to write more things to it later
                }
                'XML' {
                    # Write verbose message
                    Write-Verbose -Message ('Exporting objects to {0} format' -f $PSItem)

                    # Format the destination $FilePath
                    $FilePath = '{0}\{1:yyyy-MM-dd_HH-mm-ss-fff}_{2}.{3}' -f $OutputPath,$Date,$Name,$PSItem.ToLower()

                    # Export objects as XML data
                    $Objects | Export-CliXml -Path $FilePath

                    # Track $FilePath for protecting later
                    $Path += $FilePath
                }
                default {
                    Write-Warning ('Unexpected Out-PRFile OutputType: {0}' -f $OutputType)
                    exit
                }
            }
        } catch {
            # Caught error exporting $Objects
            $Message = '{0} output export error: {1}' -f $FilePath,$PSItem

            # Write output object export warning
            Write-PRWarning -Message $Message

            # Remove the created $Path file
            Remove-Item -Force -Path $FilePath
        }

        # Protect the newly created output files
        Protect-PRFile -Path $Path
    }
}

function Protect-PRFile {
    param (
        [Parameter(Position=0)]
        [String[]]$Path = (Get-ChildItem -File -Force -Recurse -Attributes '!ReadOnly' -Exclude '*.xlsx' -Path (Get-PRPath -Output) -ErrorAction 'Ignore' | Select-Object -ExpandProperty 'FullName'),

        [ValidateSet('SHA1','SHA256','SHA384','SHA512','MACTripleDES','MD5','RIPEMD160')]
        [String]$HashAlgorithm = $global:PowerResponse.Config.HashAlgorithm
    )

    process {
        foreach ($File in $Path) {
            try {
                # Make $Path items ReadOnly
                Set-ItemProperty -Path $File -Name 'IsReadOnly' -Value $true -ErrorAction 'Stop'

                # Write the new output file log with Hash for each entity in $Path
                Get-FileHash -Algorithm $HashAlgorithm -Path $File -ErrorAction 'Stop' | Foreach-Object {
                    $Message = 'Protected file: ''{0}'' with {1} hash: ''{2}''' -f ($PSItem.Path -Replace $global:PowerResponse.Regex.Output), $PSItem.Algorithm, $PSItem.Hash

                    # Write protection and integrity log
                    Write-PRLog -Message $Message
                }
            } catch {
                # Format the warning $Message
                $Message = 'Encountered error protecting file ''{0}'': {1}' -f $File,$PSItem

                # Print the warning $Message
                Write-PRWarning -Message $Message
            }
        }
    }
}

function Write-PRPluginLog {
    param (
        [String[]]$ComputerName,
        [String]$Plugin,
        [PSObject]$RemoteErrors,
        [Switch]$FrameworkFailure,
        [String]$FrameworkError = 'The framework failed to execute this plugin'
    )

    process {
        # Loop through each $Computer
        foreach ($Computer in $ComputerName) {
            # Check for a $RemoteError
            $RemoteError = $RemoteErrors | Where-Object { $PSItem.OriginInfo.PSComputerName -eq $Computer }

            # Build $LogLine
            $LogLine = [PSCustomObject]@{
                Date = '{0:u}' -f (Get-Date).ToUniversalTime()
                UserName = $ENV:UserName
                Plugin = $Plugin
                Success = -not [Boolean]$RemoteError
                Error = $RemoteError.Exception
            }

            # If the framework was unable to execute the plugin, say so
            if ($FrameworkFailure) {
                $LogLine.Success = $false
                $LogLine.Error = $FrameworkError
            }

            # Get the log file name
            $FileName = '{0}_plugin-log.csv' -f $Computer.ToLower()

            # Get the directory path
            $Directory = Join-Path -Path (Get-PRPath -Output) -ChildPath $Computer

            # Create containing directory if it doesnt' exist yet
            if (!(Test-Path -PathType 'Container' -Path $Directory)) {
                $null = New-Item -Type 'Directory' -Path $Directory
            }

            # Get the log path
            $LogPath = Join-Path -Path $Directory -ChildPath $FileName

            # See if file already exists
            $Append = Test-Path -Path $LogPath

            # Make the log file writeable
            # Set-ItemProperty -Path $LogPath -Name 'IsReadOnly' -Value $false -ErrorAction 'SilentlyContinue'

            try {
                # Write the $LogLine to $LogPath
                $LogLine | Export-Csv -Force -Append:$Append -NoTypeInformation -Path $LogPath -ErrorAction 'Stop'
            } catch {
                # Unable to write plugin log
                $Message = 'Unable to write entry to plugin log {0}' -f $LogPath

                # Write warning message
                Write-PRWarning -Message $Message
            }

            # Write the success or failure message to screen
            if ($LogLine.Success) {
                # Format host success $Message
                $Message = 'Plugin {0} Execution Succeeded for {1} at {2}' -f $Plugin, $Computer, (Get-Date)

                # Write execution success message
                Write-PRHost -Message $Message
            } else {
                # Format the remote error $Message
                $Message = 'Plugin {0} Execution Error for {1}: {2}' -f $Plugin.ToUpper(),$Computer,$LogLine.Error

                # Write warning $Message
                Write-PRWarning -Message $Message
            }

            # Make the log file readonly
            # Set-ItemProperty -Path $LogPath -Name 'IsReadOnly' -Value $true -ErrorAction 'SilentlyContinue'
        }
    }
}

function Read-PRHost {
    process {
        # Set up $Prompt text
        $Prompt = '{0}> ' -f $global:PowerResponse.Config.PromptText

        # Write the $Prompt to the host
        Write-Host $Prompt -NoNewLine

        # Return the line entered by the user
        return $Host.UI.ReadLine()
    }
}

function Write-PRContext {
    param (
        [String[]]$Choice
    )

    process {
        # Compute $Title - Power-Response\CurrentPath
        $Title = $global:PowerResponse.Location.FullName -Replace $global:PowerResponse.Regex.Plugins

        # Print Title
        $Lines = @("`n  {0}:" -f $Title)

        # Add each $Choice to the $Lines list
        0..($Choice.Length-1) | Foreach-Object { $Lines += '[{0}] - {1}' -f $PSItem,$Choice[$PSItem] }

        # Extra blank line
        $Lines += ''

        # Write the $Lines to the screen
        Write-Host -Object ($Lines -Join "`n")
    }
}

function Write-PRLog {
    param (
        [Parameter(Mandatory=$true)]
        [String]$Message,
        [String]$UserName = $ENV:UserName
    )

    process {
        # Get UTC $Date
        $Date = (Get-Date).ToUniversalTime()

        # Build the $LogPath
        $LogPath = '{0}\{1:yyyy-MM-dd}.csv' -f (Get-PRPath -Logs),$Date

        # Determine Plugin or Menu context
        if (!$global:PowerResponse.Location -or $global:PowerResponse.Location.PSIsContainer) {
            $Context = 'Menu'
        } else {
            $Context = $global:PowerResponse.Location.FullName -Replace $global:PowerResponse.Regex.Plugins
        }

        # Build $LogLine
        $LogLine = [PSCustomObject]@{
            Date = '{0:u}' -f $Date
            UserName = $UserName
            Context = $Context
            Message = $Message
        }

        $LogLine | Export-Csv -NoTypeInformation -Append -Path $LogPath
    }
}

function Write-PRError {
    param (
        [Parameter(Mandatory=$true)]
        [String]$Message,
        [String]$Prepend,
        [String]$Append
    )

    process {
        # Print error message to screen
        Write-Error -Message ($Prepend + $Message + $Append) -ErrorAction 'Continue'

        # Write message to log
        Write-PRLog -Message $Message
    }
}

function Write-PRHost {
    param (
        [Parameter(Mandatory=$true)]
        [String]$Message,
        [String]$Prepend,
        [String]$Append
    )

    process {
        # Print message to screen
        Write-Host -Object ($Prepend + $Message + $Append)

        # Write message to log
        Write-PRLog -Message $Message
    }
}

function Write-PRWarning {
    param (
        [Parameter(Mandatory=$true)]
        [String]$Message,
        [String]$Prepend,
        [String]$Append
    )

    process {
        # Print warning message to screen
        Write-Warning -Message ($Prepend + $Message + $Append)

        # Write message to log
        Write-PRLog -Message $Message
    }
}

# Initialize $global:PowerResponse hashtable
$global:PowerResponse = @{}

# Import $global:PowerResponse.Config from data file
Import-Config -Path $ConfigPath

# $Banner for Power-Response
$Banner = @'

    ____                                ____
   / __ \____ _      _____  _____      / __ \___  _________  ____  ____  ________
  / /_/ / __ \ | /| / / _ \/ ___/_____/ /_/ / _ \/ ___/ __ \/ __ \/ __ \/ ___/ _ \
 / ____/ /_/ / |/ |/ /  __/ /  /_____/ _, _/  __(__  ) /_/ / /_/ / / / (__  )  __/
/_/    \____/|__/|__/\___/_/        /_/ |_|\___/____/ .___/\____/_/ /_/____/\___/
                                                   /_/

'@ 

Write-Host -Object $Banner

if ($global:PowerResponse.Config.ShowParametersAtStart){
    Write-Host "`nPower-Response Parameters"

    # Alphabetize non-hashtable values first, then hashtable values expanded with .s after
    $ConfigCopy = [Ordered]@{}
    $global:PowerResponse.Config.GetEnumerator() | Where-Object { $PSItem.Value -isnot [HashTable] } | Sort-Object -Property 'Name' -PipelineVariable 'Item' | Foreach-Object { $ConfigCopy.($Item.Key) = $Item.Value }
    $global:PowerResponse.Config.GetEnumerator() | Where-Object { $PSItem.Value -is [HashTable] } | Sort-Object -Property 'Name' -PipelineVariable 'Item' | Foreach-Object { $Item.Value.GetEnumerator() | Sort-Object -Property 'Name' | Foreach-Object { $ConfigCopy.('{0}.{1}' -f $Item.Key,$PSItem.Key) = $PSItem.Value } }

    # #Display Config Parameters
    [PSCustomObject]$ConfigCopy
    Write-Host "`n"

}

# Write a log to indicate framework startup
Write-PRLog -Message 'Began the Power-Response framework'

# UserInput class is designed to separate user input strings to successfully casted string type parameters
# Essentially acts like a string for our purposes
if ('UserInput' -as [Type] -ne $null) {
    Write-PRLog -Message 'Creating UserInput class'
    class UserInput {
        [String]$Value

        UserInput([String]$Value) {
            $this.Value = $Value
        }

        [String] ToString() {
            return $this.Value
        }
    }
}

# Get the $Plugins directory item
$Plugins = Get-Item -Path (Get-PRPath -Plugins)

# Initialize the current $global:PowerResponse.Location to the $Plugins directory item
$global:PowerResponse.Location = $Plugins

# Ensure we have at least one plugin installed
if (!(Get-ChildItem $global:PowerResponse.Location)) {
    Write-Error 'No Power-Response plugins detected'
    Read-Host 'Press Enter to Exit'
    exit
}

# If we have have a executing-admin user name mismatch, gather the credential object and store it in the $global:PowerResponse.Parameters hashtable
if ($ENV:UserName -ne $global:PowerResponse.Config.AdminUserName -and $Credential.UserName -ne $global:PowerResponse.Config.AdminUserName) {
    $Credential = Get-Credential -UserName $global:PowerResponse.Config.AdminUserName -Message 'Enter administrative credentials'
}

# Initialize tracked $global:PowerResponse.Parameters provided $Parameter hashtable
$global:PowerResponse.Parameters = $Parameter.Clone()

# Ensure default value for ComputerName parameter
if (!$global:PowerResponse.Parameters.ComputerName) {
    $global:PowerResponse.Parameters.ComputerName = $ComputerName
}

# Ensure default value for ComputerName parameter
if (!$global:PowerResponse.Parameters.Credential) {
    $global:PowerResponse.Parameters.Credential = $Credential
}

# Ensure default value for OutputType parameter
if (!$global:PowerResponse.Parameters.OutputType) {
    $global:PowerResponse.Parameters.OutputType = $global:PowerResponse.Config.OutputType
}

# Check for specific plugins to execute
if ($Plugin.Count -gt 0) {
    # Force no prompt for enter when running from the command line
    $global:PowerResponse.Config.AutoClear = $false

    # Loop through provided plugins
    foreach ($Name in $Plugin) {
        # Get referenced plugin $Name
        $Item = Get-PRPlugin -Name $Name

        if ($Item) {
            # Execute the resolved plugin path
            Invoke-RunCommand -Item $Item
        } else {
            # Format warning $Message
            $Message = 'No plugins matched the identifier: {0}' -f $Name

            Write-PRWarning -Message $Message
        }
    }

    # Return early
    return 
}

# Trap 'exit's and Ctrl-C interrupts
try {
    # Loop through searching for a script file and setting parameters
    do {        
        # Compute $Choice - directories starting with alphanumeric character | files ending in .ps1
        $Choice = Get-ChildItem -Path $global:PowerResponse.Location.FullName | Where-Object { ($PSItem.PSIsContainer -and ($PSItem.Name -Match '^[A-Za-z0-9]')) -or (!$PSItem.PSIsContainer -and ($PSItem.Name -Match '\.ps1$')) } | Sort-Object -Property 'PSIsContainer','Name' | Select-Object -ExpandProperty 'Name'

        # If we don't have a single $Choice which is our location name, print context
        if ($Choice -ne $global:PowerResponse.Location.Name) {
            # Add the 'Back' option to $Choice
            if ($Plugins.FullName -NotMatch [Regex]::Escape($global:PowerResponse.Location.FullName)) {
                [String[]]$Choice = @('..') + $Choice | Where-Object { $PSItem }
            }

            # Write context to the screen, showing the back option if anywhere but the $Plugins directory
            Write-PRContext -Choice $Choice
        }

        # Get $UserInput
        $UserInput = (Read-PRHost).Trim()

        # Interpret $UserInput as a location move, or power-response command
        if ($global:PowerResponse.Location.PSIsContainer -and $UserInput -and (0..($Choice.Length-1)) -Contains $UserInput) {
            try {
                # Get the selected $global:PowerResponse.Location item
                $global:PowerResponse.Location = Get-Item -Path (Join-Path -Path $global:PowerResponse.Location.FullName -ChildPath $Choice[$UserInput])
            } catch {
                Write-Warning 'Something went wrong, please try again'
            }

            if (!$global:PowerResponse.Location.PSIsContainer) {
                # Format all the $global:PowerResponse.Parameters to form to the selected $global:PowerResponse.Location
                Format-Parameter

                # Show all of the $global:PowerResponse.Parameters relevent to the selected $CommandParameters
                Invoke-ShowCommand
            }
        } else {
            # Run the input as a command
            Invoke-PRCommand -UserInput $UserInput | Out-Default
        }
    } while ($True)
} finally {
    # Write a log to indicate framework exit
    Write-PRLog -Message 'Exited the Power-Response framework'

    # Remove $global:PowerResponse hashtable
    Remove-Variable -Name 'PowerResponse' -Scope 'global'

    Write-Host "`nExiting..."
}
